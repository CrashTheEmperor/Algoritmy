#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "TQueue.h"

int main() {

	struct TQueue queue;
	queue_init(&queue);

	while (true) {
		char znak = getchar();
		if (znak == '\n')
			break;
		queue_push(&queue, znak);
	}

	/*for (struct TQueueIterator it = queue_iterator_begin(&queue); queue_iterator_is_valid(&it); queue_iterator_to_next(&it))
		printf("%c ", queue_iterator_value(&it));
	putchar('\n');*/
		
	int num;
pocet_otacek:
	printf("Pocet otacek: ");
	scanf("%d", &num);

	if (num == 0) {
		goto pocet_otacek;
	}

	for (struct TQueueIterator it = queue_iterator_begin(&queue); queue_iterator_is_valid(&it); queue_iterator_to_next(&it))
		printf("%c", queue_iterator_value(&it));
	putchar('\n');
	
	if (num > 0) {
		while (num != 0) {
			TQueueElement current;
			queue_front(&queue, &current);
			queue_pop(&queue);
			queue_push(&queue, current);

			for (struct TQueueIterator it = queue_iterator_begin(&queue); queue_iterator_is_valid(&it); queue_iterator_to_next(&it))
				printf("%c", queue_iterator_value(&it));
			putchar('\n');
			num -= 1;
		}
	}
	if (num < 0) {
		while (num != 0){
			TQueueElement current;
			queue_back(&queue, &current);
			queue_pop_back(&queue);
			queue_push_front(&queue, current);

			for (struct TQueueIterator it = queue_iterator_begin(&queue); queue_iterator_is_valid(&it); queue_iterator_to_next(&it))
				printf("%c", queue_iterator_value(&it));
			putchar('\n');
			num += 1;
		}
	}

	return 0;
}

bool queue_push_front(struct TQueue* aQueue, TQueueElement aValue) {
	if (aQueue == NULL)
		return false;
	if (aQueue->iValues == NULL)
		return false;
	if (aQueue->iFrontPos == 0) {
		if (QUEUE_MAXCOUNT - 1 == aQueue->iBackPos)
			return false;
		aQueue->iValues[QUEUE_MAXCOUNT - 1] = aValue;
		aQueue->iFrontPos = QUEUE_MAXCOUNT - 1;
		return true;
	}

	if ((aQueue->iFrontPos - 1) == aQueue->iBackPos)
		return false;
	else {
		aQueue->iFrontPos = aQueue->iFrontPos - 1;
		aQueue->iValues[aQueue->iFrontPos] = aValue;
	}
	return true;
}

bool queue_pop_back(struct TQueue* aQueue) {
	if (aQueue == NULL)
		return false;
	if (aQueue->iBackPos == 0) {
		if (aQueue->iFrontPos == QUEUE_MAXCOUNT - 1)
			return false;
		aQueue->iBackPos = QUEUE_MAXCOUNT - 1;
		return true;
	}
	
	if (aQueue->iFrontPos == aQueue->iBackPos - 1)
		return false;
	else
		aQueue->iBackPos -= 1;
	return true;
}
